Program 1-C

#include<stdio.h>
int a = 0;
 
struct node
{
    node *next, *prev, *top;
    int info;
}*head = NULL, *tail = NULL, *p = NULL, *r = NULL, *np = NULL, *q = NULL;
 
void create(int z)
{
    np = new node;
    np->info = z;
    np->next = NULL;
    np->prev = NULL;
    np->top = NULL;
    if (a == 0)
    {
        tail = np;
        head = np;
        p = head;
        p->next = NULL;
        p->prev = NULL;
        p->top = NULL;
        a++;
    }
    else
    {
        p = head;
        r = p;
        if (np->info < p->info)
        {
            np->next = p;
            p->prev = np;
            np->prev = NULL;
            head = np;
            p = head;
            do
            {
                p = p->next;
            }
            while (p->next != NULL);
            tail = p;
        }
        else if (np->info > p->info)
        {
            while (p != NULL && np->info > p->info)
            {
                r = p;
                p = p->next;
                if (p == NULL)
                {
                    r->next = np;
                    np->prev = r;
                    np->next = NULL;
                    tail = np;
                    break;
                }   
                else if (np->info <= p->info)
                {
                    if (np->info < p->info)
                    { 
                        r->next = np;
                        np->prev = r;
                        np->next = p;
                        p->prev = np;
                        if (p->next != NULL)
                        {
                            do
                            {
                                p = p->next;
                            }
                        while (p->next !=NULL);
                    }
                    tail = p;
                    break;
                    }
                    else if (p->info == np->info)
                    {
                        q = p;
                        while (q->top != NULL)
                        {
                           q = q->top;
                        }
                        q->top = np;
                        np->top = NULL;
                        break;
                    }
                }
            }
        }        
    }
}
 
void traverse_tail()
{
    node *t = tail;
    
    while (t != NULL)
    {
        cout<<t->info<<"\t";
        q = t;
        while (q->top != NULL)
        {
              q = q->top;
              printf("top->",q->info"\t");
        }
        t = t->prev;
    }
    cout<<endl<<endl;
}
 
void traverse_head()
{
    node *t = head;
    while (t != NULL)
    {
        cout<<t->info<<"\t";
        q = t;
        while (q->top != NULL)
        {
            q = q->top; 
            printf("top->",q->info"\t");
        }
        t = t->next;
    }
    
}
 
int main()
{
    int c = 0, no, value, ch;
    printf("Please enter the number of nodes: ");
    scanf("%d",&no);
    while (c < no)
    {
        printf("Enter the value of node: ");
        scanf("%d",&value);
        create(value);
        c++;
    }
    printf("Traversing triply Linked List head: ");
    traverse_head();
    
   printf("Traversing Triply Linked List tail: ");
    traverse_tail();
   
   }

Program 2-Python

class TreeNode(object):
    def _init_(self, x):
        self.val = x
        self.left = None
        self.right = None

def is_BST(root):
    stack = []
    prev = None
    
    while root or stack:
        while root:
            stack.append(root)
            root = root.left
        root = stack.pop()
        if prev and root.val <= prev.val:
            return False
        prev = root
        root = root.right
    return True

root = TreeNode(2)  
root.left = TreeNode(1)  
root.right = TreeNode(3) 
 
result = is_BST(root)
print(result)

root = TreeNode(1)  
root.left = TreeNode(2)  
root.right = TreeNode(3) 
 
result = is_BST(root)
print(result
